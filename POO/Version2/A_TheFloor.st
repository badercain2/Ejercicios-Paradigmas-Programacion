PackageManifest subclass: #ManifestATheFloor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor-Manifest'!!ManifestATheFloor commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestATheFloor class	instanceVariableNames: ''!!ManifestATheFloor class methodsFor: 'code-critics' stamp: 'Cain 10/18/2024 12:25'!ruleReDeadMethodV1FalsePositive	^ #(#(#(#RGPackage #(#A_TheFloor)) #'2024-10-18T12:25:21.694659-03:00') )! !!ManifestATheFloor class methodsFor: 'code-critics' stamp: 'Cain 10/18/2024 12:24'!ruleRBUnaryAccessingMethodWithoutReturnRuleV1FalsePositive	^ #(#(#(#RGPackage #(#A_TheFloor)) #'2024-10-18T12:24:43.078659-03:00') )! !!ManifestATheFloor class methodsFor: 'code-critics' stamp: 'Cain 10/18/2024 14:18'!ruleRBCodeCruftLeftInMethodsRuleV1FalsePositive	^ #(#(#(#RGPackage #(#A_TheFloor)) #'2024-10-18T14:18:41.286659-03:00') )! !!ManifestATheFloor class methodsFor: 'code-critics' stamp: 'Cain 10/18/2024 14:18'!ruleRBUtilityMethodsRuleV1FalsePositive	^ #(#(#(#RGPackage #(#A_TheFloor)) #'2024-10-18T14:18:43.434659-03:00') )! !!ManifestATheFloor class methodsFor: 'code-critics' stamp: 'Cain 10/18/2024 14:56'!ruleRBSelfSentNotImplementedRuleV1FalsePositive	^ #(#(#(#RGPackage #(#A_TheFloor)) #'2024-10-18T14:56:06.571659-03:00') )! !!ManifestATheFloor class methodsFor: 'code-critics' stamp: 'Cain 10/18/2024 14:56'!ruleRBReturnsBooleanAndOtherRuleV1FalsePositive	^ #(#(#(#RGPackage #(#A_TheFloor)) #'2024-10-18T14:56:10.231659-03:00') )! !!ManifestATheFloor class methodsFor: 'code-critics' stamp: 'Cain 10/18/2024 12:24'!ruleRBInconsistentMethodClassificationRuleV1FalsePositive	^ #(#(#(#RGPackage #(#A_TheFloor)) #'2024-10-18T12:24:45.911659-03:00') )! !Object subclass: #Casilla	instanceVariableNames: 'propietario'	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor'!!Casilla methodsFor: 'acessing' stamp: 'Cain 10/18/2024 00:14'!propietario	^propietario.! !!Casilla methodsFor: 'acessing' stamp: 'Cain 10/18/2024 00:15'!propietario: unString	propietario :=unString.! !!Casilla methodsFor: 'acessing' stamp: 'Cain 10/18/2024 00:17'!marcar: nombreJugador	propietario:=nombreJugador.! !!Casilla methodsFor: 'acessing' stamp: 'Cain 10/18/2024 00:16'!initialize 	propietario :='Ninguno'.! !Object subclass: #Jugador	instanceVariableNames: 'nombre posicion posicionesconquistadas'	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor'!!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 14:56'!posicionesconquistadas	^posicionesconquistadas.		"ojo aca, ver despues que onda"	"nombre posicion posicionesconquistadas"! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 11:33'!nombre 	^nombre.! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 13:18'!posicion	^posicion	"nombre posicion posicionesconquistadas"! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 13:19'!posicionesconquistadas: unObjeto	posicionesconquistadas := unObjeto .		"ojo aca, ver despues que onda"	"nombre posicion posicionesconquistadas"! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 11:33'!nombre: unNombre	nombre:= unNombre.! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 13:19'!posicion: unObjeto	posicion:=unObjeto .	"nombre posicion posicionesconquistadas"! !!Jugador methodsFor: 'initialization' stamp: 'Cain 10/18/2024 13:24'!constructor:unNombre int:x int:y	nombre:=unNombre.	posicion:={ x. y }.	posicionesconquistadas := OrderedCollection new.	posicionesconquistadas add: posicion.! !!Jugador methodsFor: 'initialization' stamp: 'Cain 10/18/2024 13:21'!initialize	self constructor.! !!Jugador methodsFor: 'mover' stamp: 'Cain 10/18/2024 14:59'!movera:nuevaX int:nuevaY tablero:unTablero	|diffX diffY|(  (nuevaX<1)  | (nuevaX>=(unTablero tamaño) ) | (nuevaY < 1) | ( nuevaY>=(unTablero tamaño) ) )ifTrue:[		Transcript show: 'Coordenadas fuera del tablero'.	^true.	].	"verificar posicion adyacentes"	diffX := ( nuevaX - self posicion  )abs.	diffY := (nuevaY - self posicion )abs.		(  (diffX>1)  | (diffY>1 ) | (nuevaY < 1) | ((diffX =1 )and:[diffY =1] ) )ifTrue:[	Transcript show: 'Coordenadas fuera del tablero'.	^true.	].	"mover jugador"	unTablero moverjugador:nuevaX  int:nuevaY  string:(self nombre).	self posicion: { nuevaX. nuevaY } .	"aca me quede"	( (self posicionesconquistadas) includes: { nuevaX. nuevaY }  )ifFalse:[		posicionesconquistadas add: { nuevaX. nuevaY }		].		! !Object subclass: #Prueba	instanceVariableNames: 'lista tupla'	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor'!!Prueba methodsFor: 'accessing' stamp: 'Cain 10/18/2024 12:12'!tupla	^tupla.! !!Prueba methodsFor: 'accessing' stamp: 'Cain 10/18/2024 12:10'!lista 	^lista.! !!Prueba methodsFor: 'accessing' stamp: 'Cain 10/18/2024 12:24'!initialize 	lista:=OrderedCollection new.! !!Prueba methodsFor: 'accessing' stamp: 'Cain 10/18/2024 12:26'!tupla: unObjeto	tupla:=unObjeto.		self lista add: unObjeto .! !Object subclass: #Tablero	instanceVariableNames: 'casillas tamaño'	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor'!!Tablero methodsFor: 'mover' stamp: 'Cain 10/18/2024 01:00'!marcarcasilladejugadoreliminado: jugadorEliminado string:nuevoPropietario	1 to: 3 do: [:i |    1 to: 3 do: [:j |						( ((casillas  at: i at: j)propietario ) = jugadorEliminado  ) ifTrue:[					(casillas  at: i at: j) marcar: nuevoPropietario .				].      ].].! !!Tablero methodsFor: 'mover' stamp: 'Cain 10/18/2024 01:10'!moverjugador:x int:y string:nombreJugador	( ((casillas  at: x at: y)propietario ) ~= 'Ninguno' )ifTrue:[			Transcript show: ((nombreJugador asString ), 'ha eliminado a ', ((casillas  at: x at: y)propietario ) asString ).			self marcarcasilladejugadoreliminado:((casillas  at: x at: y)propietario )  string:nombreJugador.		].	((casillas  at: x at: y)) marcar:nombreJugador	! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:32'!constructor: untamaño	tamaño:= untamaño.	casillas:= (Array2D rows:tamaño  columns:tamaño).	self inicializartablero.	! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:33'!inicializartablero	"Construir una cadena de texto con los valores de la matriz"	1 to: 3 do: [:i |    1 to: 3 do: [:j |			        casillas at: i at: j put: ( Casilla new ) .     ].].! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:24'!tamaño: unInteger	tamaño:=unInteger.	"instanceVariableNames: 'casillas tamaño'"	"comment stating purpose of message"! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:20'!casillas	^casillas.	"instanceVariableNames: 'casillas tamaño'"	"comment stating purpose of message"! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:34'!initialize	self constructor:3.! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:23'!tamaño	^tamaño.	"instanceVariableNames: 'casillas tamaño'"	"comment stating purpose of message"! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:23'!casillas: casilla	casillas :=casilla. 	"instanceVariableNames: 'casillas tamaño'"	"comment stating purpose of message"! !!Tablero methodsFor: 'printing' stamp: 'Cain 10/18/2024 00:40'!mostrartablero	"Construir una cadena de texto con los valores de la matriz"|output|"Construir una cadena de texto con los valores de la matriz"output := String streamContents: [:stream |    1 to: (tamaño) do: [:i |        1 to: (tamaño) do: [:j |            stream nextPutAll: ((casillas  at: i at: j)propietario ) printString; space.        ].        stream cr. "Salto de línea para cada fila"    ].]."Mostrar toda la matriz en el Transcript de una vez"^output.! !