Object subclass: #Casilla	instanceVariableNames: 'propietario'	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor'!!Casilla methodsFor: 'acessing' stamp: 'Cain 10/18/2024 00:14'!propietario	^propietario.! !!Casilla methodsFor: 'acessing' stamp: 'Cain 10/18/2024 00:15'!propietario: unString	propietario :=unString.! !!Casilla methodsFor: 'acessing' stamp: 'Cain 10/18/2024 00:17'!marcar: nombreJugador	propietario:=nombreJugador.! !!Casilla methodsFor: 'acessing' stamp: 'Cain 10/18/2024 00:16'!initialize 	propietario :='Ninguno'.! !Object subclass: #Juego	instanceVariableNames: 'tablero jugadores'	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor'!!Juego methodsFor: 'manejatodo' stamp: 'Cain 10/19/2024 14:08'!iniciarjuego	| nuevaX  nuevaY |	"le pongo asi para que no me rompa el programa"	"solo voy a jugar con 1"	[ true ] whileTrue: [  						"solo trabajamos con el 1er jugador"			jugadores do: [  :jugador|												"Transcript clear.""este clear mas para el final "			Transcript cr.			Transcript show: ((tablero mostrartablero ) asString );cr .			"mejorarle a este porque no va a mostrar todo el mensaje"			Transcript show: (( jugador   nombre )asString ).			"falta leer todavia los datos"			nuevaX:=UIManager default request:'ingresar un valor para x'.			nuevaY:=UIManager default request:'ingresar un valor para y'.			nuevaX:=nuevaX asInteger.			nuevaY:=nuevaY asInteger.						(true) ifTrue: [ 					jugador movera:nuevaX  int:nuevaY  tablero:tablero. 				 ].						"despues hago el control de errores"				]. "este ahora es del jugadores "]. "este es del while"! !!Juego methodsFor: 'accessing' stamp: 'Cain 10/18/2024 17:31'!tablero: unObjeto	tablero:=unObjeto."'tablero jugadores'"! !!Juego methodsFor: 'accessing' stamp: 'Cain 10/18/2024 17:33'!tablero	^tablero."'tablero jugadores'"! !!Juego methodsFor: 'accessing' stamp: 'Cain 10/18/2024 18:08'!initialize 	self constructor .! !!Juego methodsFor: 'accessing' stamp: 'Cain 10/18/2024 18:07'!constructor		tablero:= Tablero new. "aca en teoria le envio el tamaño, pero ya le meti un 3 que crea 9 casillas"	jugadores:= OrderedCollection new. "creo la lista"	self inicializarjugadores.! !!Juego methodsFor: 'accessing' stamp: 'Cain 10/18/2024 17:33'!jugadores: unObjeto	jugadores:=unObjeto.	"tener cuidado aca""'tablero jugadores'"! !!Juego methodsFor: 'accessing' stamp: 'Cain 10/18/2024 17:33'!jugadores	^jugadores.! !!Juego methodsFor: 'accessing' stamp: 'Cain 10/19/2024 12:02'!inicializarjugadores		|objeto objeto2 objeto3 objeto4|		"creo los jugadores y los inicializo, okay"		objeto:= Jugador new.		objeto2:= Jugador new.		objeto3:= Jugador new.		objeto4:= Jugador new.				"creo los jugadores y los voy guardando en mi atributo"		"vamos a hacer que inicializen ahi porque si no se me rompe toda la logica, sin embargo tenemos que poner su posicion de inicio"		jugadores add: (objeto constructor: 'Jugador1' int:1  int:1 ).		jugadores add: (objeto2 constructor: 'Jugador2' int:1  int:3 ).		jugadores add: (objeto3 constructor: 'Jugador3' int:3  int:1 ).		jugadores add: (objeto4 constructor: 'Jugador4' int:3  int:3 ).			! !Object subclass: #Jugador	instanceVariableNames: 'nombre posicion posicionesconquistadas'	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor'!!Jugador methodsFor: 'initialization' stamp: 'Cain 10/18/2024 13:24'!constructor:unNombre int:x int:y	nombre:=unNombre.	posicion:={ x. y }.	posicionesconquistadas := OrderedCollection new.	posicionesconquistadas add: posicion.! !!Jugador methodsFor: 'initialization' stamp: 'Cain 10/18/2024 20:21'!initialize	"self constructor: 'Cain' int:2  int:3 ."	"no hago nada, los creo y le envio el mensaje al constructor directamente".! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 14:56'!posicionesconquistadas	^posicionesconquistadas.		"ojo aca, ver despues que onda"	"nombre posicion posicionesconquistadas"! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 11:33'!nombre 	^nombre.! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 13:19'!posicionesconquistadas: unObjeto	posicionesconquistadas := unObjeto .		"ojo aca, ver despues que onda"	"nombre posicion posicionesconquistadas"! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 13:18'!posicion	^posicion	"nombre posicion posicionesconquistadas"! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 11:33'!nombre: unNombre	nombre:= unNombre.! !!Jugador methodsFor: 'accessing' stamp: 'Cain 10/18/2024 13:19'!posicion: unObjeto	posicion:=unObjeto .	"nombre posicion posicionesconquistadas"! !!Jugador methodsFor: 'mover' stamp: 'Cain 10/19/2024 14:06'!movera:nuevaX int:nuevaY tablero:unTablero	|diffX diffY posicionsita|(  (nuevaX<1)  | (nuevaX>(unTablero tamaño) ) | (nuevaY < 1) | ( nuevaY>(unTablero tamaño) ) )ifTrue:[		Transcript show: 'Coordenadas fuera del tablero'.	^self.	]. 	"Hasta aca sin problemas"		"aca bug arreglado"	diffX := ( nuevaX - self posicion first  )abs.	diffY := (nuevaY - self posicion second )abs.		(  (diffX>1)  | (diffY>1 ) | ((diffX =1 )and:[diffY =1] ) )ifTrue:[		Transcript show: 'posicion no adyacentes'.	^self	].	"Hasta aca llegamos sin problemas"		"mover jugador"	unTablero moverjugador:nuevaX  int:nuevaY  string:(self nombre).		"aca arriba hay un problema"		posicionsita:= { nuevaX. nuevaY }.		Transcript show:'posiciones que tiene', ((posicionsita)asString ).		"aca me quede"	"este de abajo funciona perfecto"	( (self posicionesconquistadas) includes:posicionsita   )ifFalse:[		posicionesconquistadas add: posicionsita 		].			! !Object subclass: #Prueba	instanceVariableNames: 'lista tupla'	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor'!!Prueba methodsFor: 'accessing' stamp: 'Cain 10/18/2024 12:10'!lista 	^lista.! !!Prueba methodsFor: 'accessing' stamp: 'Cain 10/18/2024 12:26'!tupla: unObjeto	tupla:=unObjeto.		self lista add: unObjeto .! !!Prueba methodsFor: 'accessing' stamp: 'Cain 10/18/2024 12:24'!initialize 	lista:=OrderedCollection new.! !!Prueba methodsFor: 'accessing' stamp: 'Cain 10/18/2024 12:12'!tupla	^tupla.! !Object subclass: #Tablero	instanceVariableNames: 'casillas tamaño'	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor'!!Tablero methodsFor: 'printing' stamp: 'Cain 10/18/2024 00:40'!mostrartablero	"Construir una cadena de texto con los valores de la matriz"|output|"Construir una cadena de texto con los valores de la matriz"output := String streamContents: [:stream |    1 to: (tamaño) do: [:i |        1 to: (tamaño) do: [:j |            stream nextPutAll: ((casillas  at: i at: j)propietario ) printString; space.        ].        stream cr. "Salto de línea para cada fila"    ].]."Mostrar toda la matriz en el Transcript de una vez"^output.! !!Tablero methodsFor: 'verificados' stamp: 'Cain 10/18/2024 22:47'!moverjugador:x int:y string:nombreJugador				( ((casillas  at: x at: y)propietario ) ~= 'Ninguno' )ifTrue:[			Transcript show: ((nombreJugador asString ), 'ha eliminado a ', ((casillas  at: x at: y)propietario ) asString ).			self marcarcasilladejugadoreliminado:((casillas  at: x at: y)propietario )  string:nombreJugador.		].	"DESDE TODO HASTA ACA NO HAY PROBLEMA"	((casillas  at: x at: y)) marcar:nombreJugador.	"Marco excelene, esto funciona perfecto"! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:23'!casillas: casilla	casillas :=casilla. 	"instanceVariableNames: 'casillas tamaño'"	"comment stating purpose of message"! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/19/2024 12:35'!inicializartablero	"Construir una cadena de texto con los valores de la matriz"	1 to: 3 do: [:i |    1 to: 3 do: [:j |			        casillas at: i at: j put: ( Casilla new ) .     ].]."esto de aca abajo esta mal, hay que hacerlo de otra forma""ya que en este caso los jugadores saben que poseen esas casillas pero cuando generalizamos para todo, no saben"((casillas  at: 1 at: 1)propietario: 'Jugador1' ).	((casillas  at: 1 at: 3)propietario: 'Jugador2' ).	((casillas  at: 3 at: 1)propietario: 'Jugador3' ).	((casillas  at: 3 at: 3)propietario: 'Jugador4' ).! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:24'!tamaño: unInteger	tamaño:=unInteger.	"instanceVariableNames: 'casillas tamaño'"	"comment stating purpose of message"! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:20'!casillas	^casillas.	"instanceVariableNames: 'casillas tamaño'"	"comment stating purpose of message"! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:34'!initialize	self constructor:3.! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:23'!tamaño	^tamaño.	"instanceVariableNames: 'casillas tamaño'"	"comment stating purpose of message"! !!Tablero methodsFor: 'accesing' stamp: 'Cain 10/18/2024 00:32'!constructor: untamaño	tamaño:= untamaño.	casillas:= (Array2D rows:tamaño  columns:tamaño).	self inicializartablero.	! !!Tablero methodsFor: 'mover' stamp: 'Cain 10/18/2024 01:00'!marcarcasilladejugadoreliminado: jugadorEliminado string:nuevoPropietario	1 to: 3 do: [:i |    1 to: 3 do: [:j |						( ((casillas  at: i at: j)propietario ) = jugadorEliminado  ) ifTrue:[					(casillas  at: i at: j) marcar: nuevoPropietario .				].      ].].! !PackageManifest subclass: #ManifestATheFloor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'A_TheFloor-Manifest'!!ManifestATheFloor commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestATheFloor class	instanceVariableNames: ''!!ManifestATheFloor class methodsFor: 'code-critics' stamp: 'Cain 10/19/2024 14:06'!ruleRBCodeCruftLeftInMethodsRuleV1FalsePositive	^ #(#(#(#RGPackage #(#A_TheFloor)) #'2024-10-19T14:06:14.300772-03:00') )! !!ManifestATheFloor class methodsFor: 'code-critics' stamp: 'Cain 10/19/2024 14:06'!ruleRBCascadedNextPutAllsRuleV1FalsePositive	^ #(#(#(#RGPackage #(#A_TheFloor)) #'2024-10-19T14:06:16.661772-03:00') )! !